import asyncio
import logging
import os
from typing import Dict, Optional
import aiohttp
from datetime import datetime

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.enabled = bool(self.bot_token and self.chat_id)
        
        if not self.enabled:
            logger.warning("Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ .env")
        else:
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def send_alert(self, alert_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª"""
        if not self.enabled:
            return False

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_alert_message(alert_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    if response.status == 200:
                        logger.info(f"–ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è {alert_data['symbol']}")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status}")
                        return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram: {e}")
            return False

    def _format_alert_message(self, alert_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –¥–ª—è Telegram"""
        symbol = alert_data['symbol']
        price = alert_data['price']
        volume_ratio = alert_data['volume_ratio']
        current_volume = alert_data['current_volume_usdt']
        average_volume = alert_data['average_volume_usdt']
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        emoji = "üöÄ" if volume_ratio >= 5 else "üìà" if volume_ratio >= 3 else "‚ö°"
        
        message = f"""
{emoji} <b>–ê–õ–ï–†–¢ –ü–û –û–ë–™–ï–ú–£</b>

üí∞ <b>–ü–∞—Ä–∞:</b> {symbol}
üíµ <b>–¶–µ–Ω–∞:</b> ${price:,.8f}
üìä <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞:</b> {volume_ratio}x

üìà <b>–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º:</b> ${current_volume:,.0f}
üìâ <b>–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º:</b> ${average_volume:,.0f}

üïê <b>–í—Ä–µ–º—è:</b> {timestamp}

#VolumeAlert #{symbol.replace('USDT', '')}
        """.strip()
        
        return message

    async def send_system_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.enabled:
            return False

        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': f"ü§ñ <b>–°–∏—Å—Ç–µ–º–∞:</b> {message}",
                'parse_mode': 'HTML'
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    return response.status == 200

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False